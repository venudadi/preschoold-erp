name: Build and Deploy

on:
  push:
    branches:
      - staging
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/preschool-erp-frontend
  IMAGE_NAME_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/preschool-erp-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine environment and tags
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "tag=prod-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
            echo "latest_tag=production-latest" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "tag=staging-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
            echo "latest_tag=staging-latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.env.outputs.tag }}
            ${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.env.outputs.latest_tag }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_FRONTEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_FRONTEND }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME_BACKEND }}:${{ steps.env.outputs.tag }}
            ${{ env.IMAGE_NAME_BACKEND }}:${{ steps.env.outputs.latest_tag }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_BACKEND }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: |
          echo "Frontend image: ${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.env.outputs.tag }}"
          echo "Backend image: ${{ env.IMAGE_NAME_BACKEND }}:${{ steps.env.outputs.tag }}"
          echo "Environment: ${{ steps.env.outputs.environment }}"

      # Optional: Deploy to staging server
      - name: Deploy to staging server
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "Deployment to staging would happen here"
          # Example deployment commands:
          # ssh user@staging-server "cd /app && docker-compose -f docker-compose.staging.yml pull && docker-compose -f docker-compose.staging.yml up -d"

      # Optional: Deploy to production server
      - name: Deploy to production server
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deployment to production would happen here"
          # Example deployment commands:
          # ssh user@prod-server "cd /app && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"
